from lib.iam_operations import create_client_profile

class Destroy:
    def __init__(self, id, profile, aws_region, resources):
        self.id = id
        self.logs =  []
        self.resources = resources
        self.profile = profile
        self.region = aws_region

    def destroy(self):
        self.status = 'destroy_started'
        client = create_client_profile('s3',self.region, self.profile)

        for bucket_name in self.resources['buckets']:
            bucket_objects = client.list_objects(Bucket=bucket_name).get('Contents', [])
            for obj in bucket_objects:
                client.delete_object(Bucket=bucket_name, Key=obj['Key'])
            client.delete_bucket(Bucket=bucket_name)
            self.logs.append(f"Deleted bucket {bucket_name} successfully")

        client = create_client_profile('iam',self.region, self.profile)

        for user_name in self.resources['users']:
            managed_policies = client.list_attached_user_policies(UserName=user_name)['AttachedPolicies']
            for policy in managed_policies:
                client.detach_user_policy(UserName=user_name, PolicyArn=policy['PolicyArn'])

            inline_policies = client.list_user_policies(UserName=user_name)['PolicyNames']
            for policy_name in inline_policies:
                client.delete_user_policy(UserName=user_name, PolicyName=policy_name)


            access_keys = client.list_access_keys(UserName=user_name)['AccessKeyMetadata']
            for key in access_keys:
                client.delete_access_key(UserName=user_name, AccessKeyId=key['AccessKeyId'])

            client.delete_user(UserName=user_name)
            self.logs.append(f"Deleted IAM user {user_name} successfully")

        for policy_arn in self.resources['policies']:
            policy_versions = client.list_policy_versions(PolicyArn=policy_arn)
            
            for version in policy_versions['Versions']:
                if not version['IsDefaultVersion']:
                    client.delete_policy_version(PolicyArn=policy_arn, VersionId=version['VersionId'])
            
            try:
                client.delete_policy(PolicyArn=policy_arn)
            except Exception as e:
                self.logs.append(f"Error deleting policy {policy_arn}: {e}")

        self.logs.append(f"Deleted IAM policies successfully")
        self.status = 'destroy_complete'